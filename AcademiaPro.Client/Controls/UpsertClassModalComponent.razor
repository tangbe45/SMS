
@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(levelDto.LevelId == 0 ? "Create Class" : "Update Class")</h5>
                <button type="button" class="close btn btn-danger btn-sm" @onclick="Hide" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="levelDto" OnValidSubmit="HandleCreate">
                    <DataAnnotationsValidator />
                    <InputNumber name="id" id="id" @bind-Value="levelDto.LevelId" hidden />
                    <div class="mb-3 row">
                        <label for="name" class="col-12 col-form-label">Name</label>
                        <div class="col-12">
                            <InputText id="name" name="name" autocomplete="true" class="form-control" @bind-Value="levelDto.Name" />
                            <ValidationMessage For="@(() => levelDto.Name)" />
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label for="sortorder" class="col-12 col-form-label">Sort order</label>
                        <div class="col-12">
                            <InputNumber id="sortorder" name="sortorder" class="form-control" @bind-Value="levelDto.SortOrder" />
                            <ValidationMessage For="@(() => levelDto.SortOrder)" />
                        </div>
                    </div>
                    <div class="text-end">
                        <button type="submit" class="btn btn-primary text-ri">Save</button>
                        <button @onclick="Hide" class="btn btn-secondary text-ri">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private string? _modalDisplay;
    private string? _modalClass;
    private bool _showBackdrop;

    [Parameter]
    public ListLevelDto levelDto { get; set; } = new ListLevelDto();
    //private LevelDto levelDto = new LevelDto();

    [Parameter]
    public EventCallback<ListLevelDto> OnCreate { get; set; }


    public void Show()
    {
        _modalDisplay = "block";
        _modalClass = "show";
        _showBackdrop = true;
        StateHasChanged();
    }

    public void Hide()
    {
        _modalDisplay = "none";
        _modalClass = "";
        _showBackdrop = false;
        StateHasChanged();

    }

    private void HandleCreate()
    {
        OnCreate.InvokeAsync(levelDto);
    }
}
