@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Class</h5>
                <button type="button" class="close btn btn-danger btn-sm" @onclick="Hide" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="text-danger">Are you sure you want to delete <strong>@levelDto.Name</strong></p>
            </div>
            <div class="modal-footer text-end">
                <button class="btn btn-danger" @onclick="HandleDelete">Delete</button>
                <button class="btn btn-secondary" @onclick="Hide">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string? _modalDisplay;
    private string? _modalClass;
    private bool _showBackdrop;

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    [Parameter]
    public LevelDto levelDto { get; set; }

    public void Show()
    {
        _modalDisplay = "block";
        _modalClass = "show";
        _showBackdrop = true;
        StateHasChanged();
    }

    public void Hide()
    {
        _modalDisplay = "none";
        _modalClass = "";
        _showBackdrop = false;
        StateHasChanged();
    }

    private void HandleDelete()
    {
        OnDelete.InvokeAsync(levelDto.LevelId);
    }
}

