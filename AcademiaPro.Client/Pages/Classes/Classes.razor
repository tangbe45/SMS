@page "/classes"

@inject IClassHttpRepository classRepo

<h1 class="text-center">Manage Classes</h1>
<div class="text-end">
    <button @onclick="displayModal" class="btn btn-primary">Add Class</button>
</div>

<UpsertClassModalComponent 
    levelDto="_class"
    OnCreate="HandleCreate"
    @ref="_classModal" />

<div class="container">
    <div class="classtable">

        @if(ListClasses == null)
        {
            <p><em>Loading...</em></p>
        } 
        else if (ListClasses.Count() == 0) 
        {
            <p>There are no classes</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Sort Order</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ListClasses)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.SortOrder</td>
                            <td>
                                <button class="btn btn-sm btn-warning" @onclick="() => HandleUpdate(item.LevelId)">
                                    <span class="bi bi-pencil-square"></span>
                                </button>
                                <button class="btn btn-sm btn-danger">
                                    <span class="bi bi-trash"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>


@code {
    private UpsertClassModalComponent? _classModal;

    public List<LevelDto>? ListClasses { get; set; }
    private LevelDto _class = new LevelDto();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ListClasses = await classRepo.GetClasses();
    }

    private void displayModal()
    {
        _classModal.Show();
    }

    private async Task HandleUpdate(int id)
    {
        _class = await classRepo.getClass(id);
        _classModal.Show();
    }

    private async Task HandleCreate(LevelDto levelDto)
    {
        if (levelDto.LevelId == 0)
        {
            _class = await classRepo.Create(levelDto);
            ListClasses = await classRepo.GetClasses();
            _classModal.Hide();
        } 
        else
        {
            await classRepo.Modify(levelDto.LevelId, levelDto);
            ListClasses = await classRepo.GetClasses();
            _classModal.Hide();
        }
    }
}
